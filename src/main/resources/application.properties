# Database do Postgresql - Teste
spring.datasource.url = jdbc:postgresql://localhost:5432/Teste
spring.datasource.username = postgres
spring.datasource.password = 123456

# ElephantSQL - Teste
# URL structure => postgres://username:password@hostname/databasename
# spring.datasource.url = jdbc:postgresql://silly.db.elephantsql.com/svmlgiwa
# spring.datasource.username = svmlgiwa
# spring.datasource.password = oxvUltJIpJ1dPr3nMhKFMa4_JpaecRzG

# ElephantSQL - TesteDois
# URL structure => postgres://username:password@hostname/databasename
# spring.datasource.url = jdbc:postgresql://silly.db.elephantsql.com/pbnuamcd
# spring.datasource.username = pbnuamcd
# spring.datasource.password = azz81veY3rNtI6oTm5tmU6-AfHmTI_sx

# # Heroku
# spring.datasource.url = ${JDBC_DATABASE_URL:jdbc:postgresql://silly.db.elephantsql.com/pbnuamcd}
# spring.datasource.username = ${JDBC_DATABASE_USERNAME:pbnuamcd}
# spring.datasource.password = ${JDBC_DATABASE_PASSWORD:azz81veY3rNtI6oTm5tmU6-AfHmTI_sx}
# spring.datasource.hikari.maximum-pool-size = 1

# Heroku - Manual
# spring.datasource.url = jdbc:postgresql://ec2-23-20-33-236.compute-1.amazonaws.com:5432/dck6l7nphb9t6g
# spring.datasource.username = eblgvxhwqrppnu
# spring.datasource.password = 0c9ab06add1d48d8bf5d99f3286bf0934ad88af7e791b88da00f623f429704fb

#########################################################################################################

# Liquibase
# Onde esta o arquivo de configuração do liquibase
# spring.liquibase.change-log=liquibase/master.xml
# spring.liquibase.change-log=classpath:db/changelog/liquibase-changelog.yml

# Google oAuth2
# ${GOOGLE_CLIENT_ID} ${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}

# Segurança/Autenticação/Hashing.
api.security.token.secret=${JWT_SECRET}
# Da um pouco de visibilidade sobre oque esta acontecendo na aplicação.
logging.level.org.springframework.security=TRACE

# Cria automaticamente as tabelas mapeadas na pasta MODEL.
spring.jpa.hibernate.ddl-auto = update

# Propriedade usada para especificar a plataforma para qual o Spring Boot
# deve gerar scripts SQL durante a inicialização do banco de dados.
spring.sql.init.platform=postgresql

# Se não setar essa propriedade, vai gerar uma JDBC URL unica toda vez que conectar.
spring.datasource.generate-unique-name=false

#  Performance.
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
